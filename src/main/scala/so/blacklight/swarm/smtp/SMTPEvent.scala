package so.blacklight.swarm.smtp

import so.blacklight.swarm.mail.Email

/**
	* Marker trait for events generated during an SMTP transmission either on the client's or on server's side
	*/
trait SMTPEvent

/**
	* Marker trait for events generated by the SMTP client
	*/
trait SMTPClientEvent extends SMTPEvent

/**
	* Marker trait for events sent by the SMTP client as SMTP commands
	*/
trait SMTPClientCommand extends SMTPClientEvent

/**
	* Marker trait for events generated by the SMTP server
	*/
trait SMTPServerEvent extends SMTPEvent

/**
	* Marker trait for events sent by the SMTP server in response to an SMTP client command
	*/
trait SMTPServerResponse extends SMTPServerEvent

/**
	* Initial greeting event sent by the SMTP server to the client upon connection.
	*
	* @param greeting additinal greeting message (may be left empty)
	* @example 220 hostname.domainname.tld ESMTP Postfix (Ubuntu)
  */
// TODO rename this event to Service Ready or something
case class SMTPServerServiceReady(greeting: String) extends SMTPServerEvent

case object SMTPServerServiceNotAvailable extends SMTPServerEvent
/**
	* HELO/EHLO message sent by the client after receiving the initial greeting from the server.
	*
	* @example EHLO clientname
	*/
case class SMTPClientEhlo(hostId: String) extends SMTPClientCommand

/**
	* SMTP server's reply to the client's EHLO message. This usually includes a non-empty
	*
	* @param capabilities
	*/
// eg:
// 250-hostname.domainname.tld
// 250-PIPELINING
// 250-SIZE 10240000
// 250-VRFY
// 250-STARTTLS
// 250 8BITMIME
case class SMTPServerEhlo(capabilities: Array[String]) extends SMTPServerResponse

// eg. MAIL FROM: <user@company.com>
case class SMTPClientMailFrom(sender: String) extends SMTPClientCommand
// eg. RCPT TO: <user@company.com>
case class SMTPClientReceiptTo(recipient: String) extends SMTPClientCommand
// eg. DATA
case object SMTPClientDataBegin extends SMTPClientCommand
// represents a trailing dot (.) character at the end of a message body
case class SMTPClientDataEnd(msg: Array[Char]) extends SMTPClientCommand
// RSET
case object SMTPClientReset extends SMTPClientCommand
// QUIT
case object SMTPClientQuit extends SMTPClientCommand
// STARTTLS
case object SMTPClientStartTLS extends SMTPClientCommand
// NOOP
case object SMTPClientNoOperation extends SMTPClientCommand
// represents any command that is not defined in the SMTP protocol
case object SMTPClientUnknownCommand extends SMTPClientEvent
// an error that happens on the client's side (eg. time out, exceptions, etc)
case class SMTPClientError(error: ClientError) extends SMTPClientEvent
// a custom, single-line command that can be used for non-standard messages
case class SMTPClientCustomCommand(cmd: String) extends SMTPClientEvent

// 250 Ok
case object SMTPServerOk extends SMTPServerResponse
// 354 Start input, end with <CRLF>.<CRLF>
case object SMTPServerDataReady extends SMTPServerResponse
// 250 Mail accepted
case object SMTPServerDataOk extends SMTPServerResponse
// 221 Closing connection
case object SMTPServerQuit extends SMTPServerResponse

// 451 Local error
case object SMTPServerLocalError extends SMTPServerResponse
// 454 TLS Not availabel
case object SMTPServerTLSNotAvailable extends SMTPServerResponse
// 500 Syntax error, command unrecognised
case object SMTPServerSyntaxError extends SMTPServerResponse
// 501 Synax error in parameter
case object SMTPServerInvalidParameter extends SMTPServerResponse
// 503 Bad sequence of commands
case object SMTPServerBadSequence extends SMTPServerResponse
case object SMTPServerUnknownCommand extends SMTPServerEvent

/**
	* Represents the event of successfully receiving a complete e-mail from the client
	*
	* @param email the complete e-mail
	*/
case class ReceivedMessage(email: Email) extends SMTPServerEvent
case object InitTransaction extends SMTPClientEvent

class ClientError extends SMTPClientEvent
case object ClientDisconnected extends ClientError
